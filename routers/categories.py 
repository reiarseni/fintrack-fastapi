from fastapi import APIRouter, Depends, HTTPException, Request, Form
from fastapi.templating import Jinja2Templates
from fastapi.responses import RedirectResponse
from sqlalchemy.orm import Session
from typing import Optional

import crud
import schemas
import models
from database import get_db
from dependencies import get_current_active_user

router = APIRouter()
templates = Jinja2Templates(directory="templates")

@router.get("/")
async def read_categories(
    request: Request,
    db: Session = Depends(get_db),
    current_user: models.User = Depends(get_current_active_user)
):
    categories = crud.get_categories(db, user_id=current_user.id)
    return templates.TemplateResponse(
        "categories/list.html", 
        {"request": request, "categories": categories, "user": current_user}
    )

@router.get("/create")
async def create_category_form(
    request: Request, 
    current_user: models.User = Depends(get_current_active_user)
):
    return templates.TemplateResponse(
        "categories/form.html", 
        {"request": request, "user": current_user}
    )

@router.post("/create")
async def create_category(
    name: str = Form(...),
    type: str = Form(...),
    db: Session = Depends(get_db),
    current_user: models.User = Depends(get_current_active_user)
):
    category_data = schemas.CategoryCreate(name=name, type=type)
    crud.create_category(db=db, category=category_data, user_id=current_user.id)
    return RedirectResponse(url="/categories/", status_code=303)

@router.get("/edit/{category_id}")
async def edit_category_form(
    request: Request,
    category_id: int,
    db: Session = Depends(get_db),
    current_user: models.User = Depends(get_current_active_user)
):
    category = crud.get_category(db, category_id=category_id, user_id=current_user.id)
    if not category:
        raise HTTPException(status_code=404, detail="Categoría no encontrada")
    return templates.TemplateResponse(
        "categories/form.html", 
        {"request": request, "category": category, "user": current_user}
    )

@router.post("/edit/{category_id}")
async def update_category(
    category_id: int,
    name: str = Form(...),
    type: str = Form(...),
    db: Session = Depends(get_db),
    current_user: models.User = Depends(get_current_active_user)
):
    category_data = schemas.CategoryCreate(name=name, type=type)
    updated_category = crud.update_category(
        db=db, category_id=category_id, category=category_data, user_id=current_user.id
    )
    if not updated_category:
        raise HTTPException(status_code=404, detail="Categoría no encontrada")
    return RedirectResponse(url="/categories/", status_code=303)

@router.get("/delete/{category_id}")
async def delete_category(
    category_id: int,
    db: Session = Depends(get_db),
    current_user: models.User = Depends(get_current_active_user)
):
    deleted = crud.delete_category(db=db, category_id=category_id, user_id=current_user.id)
    if not deleted:
        raise HTTPException(status_code=404, detail="Categoría no encontrada")
    return RedirectResponse(url="/categories/", status_code=303)
